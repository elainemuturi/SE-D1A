Part 1: Introduction to Software Engineering


Explain what software engineering is and discuss its importance in the technology industry.
Software engineering involves applying engineering principles,methods and tools to develop and maintain high-quality software systems.It plays a crucial role in the technology industry by enabling the creation of software applications that power various aspects of modern life including communication and healthcare. 


Identify and describe at least three key milestones in the evolution of software engineering.
The Birth of Structured Programming (1960s-1970s)-Emerged to improve the clarity and quality and efficiency of the software.
The Introduction of Object-Oriented Programming (1980s)-Developed to address the increasing complexity of software systems.
The Rise of Agile Methodologies (2001-Present)-Focuses on iterative development and flexibility in responding to change.

List and briefly explain the phases of the Software Development Life Cycle.
Planning-Involves gathering requirements from stakeholders, defining objectives and resources needed.
Requirements Analysis-Gathering and analysing to understand the software needs.
Design-Designing the system architecture and design based on requirements.
Implementation (Coding)-Writing the actual code based on design documents.
Testing-Software undergoes rigorous testing to identify and fix bugs or issues.
Deployment-Software is deployed to the production environment where it will be used by the end-users.
Maintenance-Software enters the maintenance phase. Here it is monitored and updated to fix any post-deployment issues, add features and improve performance.

Compare and contrast the Waterfall and Agile methodologies. Provide examples of scenarios where each would be appropriate.
Waterfall Methodology-Is linear, sequential and each phase must be completed before moving to the next (rigid). Works best for well defined projects with stable requirements such as infrastructure or regulated industries.
Agile Methodology-Is iterative and flexible and project is divided into sprints that allow for continuous adaptation to feedback. Ideal for projects with evolving requirements like startups

Describe the roles and responsibilities of a Software Developer, a Quality Assurance Engineer, and a Project Manager in a software engineering team.
Software Developer-Designing, writing, and maintaining the codebase for software applications.
Quality Assurance (QA) Engineer-Ensuring the software is of high quality by identifying defects and ensuring it meets the specified requirements.
Project Manager-Oversees the entire software development process making sure that the project is delivered on time, within scope and budget.

Discuss the importance of Integrated Development Environments (IDEs) and Version Control Systems (VCS) in the software development process. Give examples of each.
Integrated Development Environments (IDEs) help streamline coding, debugging, and testing in one platform thus boosting productivity examples include Visual Studio Code and IntelliJ IDEA 
Version Control Systems (VCS) like Git or SVN enable collaborative coding, version tracking, and safe code management which is essential for team development.

What are some common challenges faced by software engineers? Provide strategies to overcome these challenges.
One challenge faced by software developers is adapting to evolving requirements or scope changes mid-project. One way to combat this challenge is to use agile methodologies while incorporating feedback iteratively and maintaining flexibility in project planning.

Explain the different types of testing (unit, integration, system, and acceptance) and their importance in software quality assurance.
Unit Testing-Tests individual components or functions in isolation to ensure they work correctly. This step is important because it helps in identifying bugs at an early stage.
Integration Testing-Tests interaction between different components to verify that they work correctly. This step is important because it can detect issues rising from integration early.
System Testing-Tests the complete and integrated software system to ensure it meets specified requirements. It is important because it validates the end-to-end system functionality and overall performance.
Acceptance Testing-Tests the software from the end userâ€™s perspective to verify if it meets specified requirements and is ready for deployment. It ensures that the software fulfils user needs and requirements.


Part 2: Introduction to AI and Prompt Engineering


Define prompt engineering and discuss its importance in interacting with AI models.
Prompt Engineering refers to designing input prompts to effectively guide AI models in generating accurate and relevant responses. It enhances model accuracy, user experience, and performance by reducing ambiguity and aligning outputs with user needs.

Provide an example of a vague prompt and then improve it by making it clear, specific, and concise. Explain why the improved prompt is more effective.
Vague Prompt-Tell me about an African capital city.
Improved Prompt-Tell me about the capital city of Kenya.
Explanation-The improved prompt is more effective because it is clearer, more specific and concise.
